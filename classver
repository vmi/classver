#!/usr/bin/perl

# Fair License (Fair)
#
# Copyright 2015 Motonori IWAMURO
#
# Usage of the works is permitted provided that this instrument is
# retained with the works, so that any entity that uses the works is
# notified of this instrument.
#
# DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.

use strict;
use warnings;
use File::Spec::Functions qw(rel2abs);
use File::Path qw(remove_tree);

our $TMP_DIR = "/tmp/classver";

our $PS;
our $IS_CYGWIN = 0;
our $STRICT_MODE = 0;

delete $ENV{JAVA_TOOL_OPTIONS};

if ($^O eq 'MSWin32') {
  $PS = qr/;/;
} elsif ($^O eq 'cygwin') {
  $PS = qr/;/;
  $IS_CYGWIN = 1;
} else {
  $PS = qr/:/;
}

sub msg {
  print @_, "\n";
}

sub emsg {
  print STDERR @_, "\n";
}

sub javaver {
  my $ver = shift;
  $ver -= 44;
  if ($ver < 1) {
    return undef;
  } elsif ($ver <= 4) {
    return "1.$ver";
  } else {
    return "$ver.0";
  }
}

sub show_classver {
  my ($name, $files) = @_;
  my %vers;
  for my $file (@$files) {
    open(my $ifh, $file) or die "Can't open $file ($!)";
    my $len = read($ifh, my $buffer, 8);
    close($ifh);
    my ($magic, $minor, $major) = unpack("Nnn", $buffer);
    if ($len != 8 || $magic != 0xCAFEBABE) {
      emsg "$name: not class file.";
      return;
    }
    my $ver = javaver($major);
    if (scalar(@$files) == 1) {
      msg "Java $ver ($major.$minor): $name";
      return;
    }
    ++$vers{$ver}{"$major.$minor"};
  }
  if (scalar(%vers) == 1) {
    my $ver = (keys(%vers))[0];
    my %subvers = %{$vers{$ver}};
    if (scalar(%subvers) == 1) {
      my $subver = (keys(%subvers))[0];
      msg "Java $ver ($subver): $name";
      return;
    }
  }
  my @ver_list = ();
  for my $ver (keys %vers) {
    my %subvers = %{$vers{$ver}};
    push(@ver_list, $ver.' ('.join(', ', keys %subvers).')');

    }
  }
}

sub unpack_jar {
  my $jar = rel2abs(shift);
  if ($IS_CYGWIN) {
    chomp($jar = `cygpath -am '$jar'`);
  }
  if (-d $TMP_DIR) {
    remove_tree($TMP_DIR);
  }
  mkdir($TMP_DIR);
  emsg("* Get class file name from jar.");
  open(my $fh, "jar tf '$jar' | tr -d '\\r' | grep '\\.class\$' |");
  local $_;
  my @class_files;
  while (<$fh>) {
    chomp;
    push(@class_files, $_);
    if ($STRICT_MODE) {
      last;
    }
  }
  close($fh);
  if (scalar(@class_files) == 0) {
    return undef;
  }
  emsg("* Extract class file.");
  my $cmd = join(' ', "cd '$TMP_DIR'; jar xf '$jar' ", map {"'$_'"} @class_files);
  system($cmd);
  return [map  {"$TMP_DIR/$_"} @class_files];
}

$STRICT_MODE = $ARGV[0] eq '-s';
if ($STRICT_MODE) {
  shift(@ARGV);
  emsg("* Enable strict mode.");
}

for my $arg (@ARGV) {
  for my $file (split($PS, $arg)) {
    my $name = $file;
    my $files;
    if ($file =~ /\.jar$/) {
      $files = unpack_jar($file);
      if (!$file) {
	emsg "$name: $name does not have class file.";
	next;
      }
    }
    show_classver($name, $files);
  }
}

remove_tree($TMP_DIR);
